Project Overview:
Create a web-based timetable scheduler app for managing employee schedules. The app should have the following features:
Add Employee Data: A form to input employee details such as name, role, position, and their availability.
View Details: A dashboard to display the details of all employees, including their names, roles, and schedules.
Filter Data: Functionality to filter employees based on criteria like name, role, or availability.

Features Breakdown:

Input Page:

Create a form with fields for employee name, role, position, and availability (days of the week and time slots).
Include validations to ensure required fields are filled.
Save the data into a database or a state management system (e.g., Redux or Context API).
View Details Page:

Display a table or card layout showing all employee details.
Include columns for name, role, position, and availability.
Use pagination if there are many employees.
Filter Data:

Add dropdowns or search fields to filter employees based on name, role, or days of availability.
The filtered results should update dynamically without refreshing the page.

Database Schema:
Use a database (like MongoDB or SQL) to store employee information. The schema should include:

name (string): Employee's name.
role (string): Employee's role (e.g., Developer, Manager).
position (string): Position in the company.
availability (array of objects): Each object should include the day of the week and time slots.
Example Schema:
{
  "name": "John Doe",
  "role": "Developer",
  "position": "Senior Engineer",
  "availability": [
    { "day": "Monday", "time": "9:00 AM - 1:00 PM" },
    { "day": "Wednesday", "time": "2:00 PM - 5:00 PM" }
  ]
}


Technologies to Use:
Frontend: HTML, CSS, JavaScript, React (or another frontend framework).
Backend: Node.js with Express.
Database: MongoDB .
Styling: Use a CSS framework like Tailwind CSS or Bootstrap.

Step-by-Step Instructions for Building the Operations App:
Step 1: Create the Input Page
Objective:
Build a page where users can input employee details (name, role, position, and availability).

Instructions:
Setup the Basic Structure:

Create a new React component called AddEmployee.jsx.
Add a form with the following fields:
Name: A text input.
Role: A dropdown or text input.
Position: A text input.
Availability:
A set of checkboxes for days of the week (Monday to Sunday).
A time range input for start and end times (e.g., 9:00 AM - 5:00 PM).
Form Validation:

Ensure all fields are required before submission.
Validate that at least one day of the week and time range is selected for availability.
Handle Form Submission:

On submission, the data should be collected and sent to a backend API endpoint.
Example JSON payload:
json
Copy code
{
  "name": "John Doe",
  "role": "Developer",
  "position": "Senior Engineer",
  "availability": [
    { "day": "Monday", "time": "9:00 AM - 1:00 PM" },
    { "day": "Wednesday", "time": "2:00 PM - 5:00 PM" }
  ]
}
Connect to Backend:

Create a POST API endpoint /api/employees in the backend to handle the data.
Use a database (e.g., MongoDB) to store the data.
Feedback to User:

Show a success message or notification after successful submission.
Clear the form fields after the data is submitted.
Step 2: Create the View Page
Objective:
Build a page to display all employee data in a tabular or card format.

Instructions:
Fetch Data:

Create a new React component called ViewEmployees.jsx.
Fetch employee data from the backend API endpoint (/api/employees) using useEffect and fetch or axios.
Display Data:

Use a table or a grid layout to display:
Name
Role
Position
Availability (list of days and times)
Table Structure: Example table:

Name	Role	Position	Availability
John Doe	Developer	Senior Engineer	Monday: 9:00 AM - 1:00 PM; Wednesday: 2:00 PM - 5:00 PM
Handle Errors:

If no data exists, show a "No employees found" message.
Handle loading and error states when fetching data.
Connect to Backend:

Create a GET API endpoint /api/employees to retrieve all employees from the database.
Step 3: Add Filter Options
Objective:
Add functionality to filter employees by name, role, or availability.

Instructions:
Add a Filter Component:

In the ViewEmployees.jsx component, create a filter section above the table.
Add the following filter options:
Search by Name: A text input field.
Filter by Role: A dropdown with role options (e.g., Developer, Manager).
Filter by Availability: A dropdown with days of the week.
Handle Filtering:

Update the displayed data when a filter is applied.
You can do this either on the frontend (filtering the fetched data) or the backend (using query parameters in the API, e.g., /api/employees?role=Developer).
Frontend Filtering Example:

Use useState to store filter inputs and filter the employee list dynamically.
javascript
Copy code
const filteredEmployees = employees.filter((employee) => {
  return (
    employee.name.toLowerCase().includes(searchName.toLowerCase()) &&
    (selectedRole ? employee.role === selectedRole : true) &&
    (selectedDay ? employee.availability.some(a => a.day === selectedDay) : true)
  );
});
Backend Filtering (Optional):

Modify the /api/employees endpoint to accept query parameters like role or day.
Use these parameters to filter the database query.
Real-Time Updates:

Update the displayed data in real time as the user types in the search box or selects filters.
Reset Filters:

Add a "Reset Filters" button to clear all applied filters and show the full list again.

Dashboard Design:
Use a simple navigation bar with links to:
Add Employee
View Details
Filter Employees
Use a card layout or a table to display employee data in the View Details section.
Include a sidebar or filters section for the filtering functionality.